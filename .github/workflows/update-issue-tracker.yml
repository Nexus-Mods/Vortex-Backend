name: Daily Open and Closed Issues Check

# This workflow is triggered manually and every 24 hours
on:
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows the workflow to be run manually

jobs:
  fetch_issues:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Fetch open issues from the repository
      id: fetch_open_issues
      run: |
        # Fetch open issues using GitHub API
        curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/nexus-mods/vortex/issues?state=open" > open_issues.json
        
        # Show fetched open issues
        cat open_issues.json

    - name: Fetch closed issues from the repository (last 30 days)
      id: fetch_closed_issues
      run: |
        # Calculate the date 30 days ago
        last_month=$(date -d "-30 days" +%Y-%m-%d)

        # Fetch closed issues using GitHub API with the 'since' parameter to get those closed in the last month
        curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/nexus-mods/vortex/issues?state=closed&since=$last_month" > closed_issues.json
        
        # Show fetched closed issues
        cat closed_issues.json
    
    - name: Process issues and generate JSON report
      run: |
        echo "Processing open and closed issues (excluding issues by vortexfeedback):"
        OUTPUT_DIR="../../out"
        mkdir -p $OUTPUT_DIR  # Create the output directory if it doesn't exist
        
        # Initialize an empty JSON array
        echo "[]" > $OUTPUT_DIR/issues_report.json

        # Function to process issues
        process_issues() {
          issues_file=$1

          # Check if the JSON file is empty or malformed
          if [ ! -s "$issues_file" ]; then
            echo "Warning: $issues_file is empty or does not exist. Skipping."
            return
          fi
          
          # Read issues from the JSON file
          for row in $(jq -c '.[]' "$issues_file"); do
            author=$(echo "$row" | jq -r '.user.login')

            # Ignore issues by vortexfeedback
            if [ "$author" = "VortexFeedback" ]; then
              echo "Skipping issue by vortexfeedback"
              continue
            fi
            
            # Append the issue data to the JSON array
            echo "$row" | jq --argjson new_row "$row" '. += [$new_row]' $OUTPUT_DIR/issues_report.json > tmp.json && mv tmp.json $OUTPUT_DIR/issues_report.json
          done
        }

        # Process both open and closed issues
        process_issues open_issues.json
        process_issues closed_issues.json
    
    - name: Commit the results
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add $OUTPUT_DIR/issues_report.json
        git commit -m "Update issues report in JSON format [$(date)]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up
      run: rm open_issues.json closed_issues.json
